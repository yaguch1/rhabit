<%= Gon::Base.render_data %>
<div class="main-view">
  <div class="upper-contents">
    <div class="rabbit-form">
      <%= image_tag 'rabbit.gif' %>
    </div>
    <div class="status-form">
      <div class="user-name"><%= current_user.nickname %></div>
      <div class="gem">
        <%= image_tag 'gem.png' %><div id="coins">0</div>
      </div>
      <div class="gacha">ガチャを回す</div>
      <div class="clothes">アイテム</div>
      <div class="friends">フレンド</div>
    </div>
  </div>
  
  <div class="lower-contents">
    <div class="tasks">
      <div class="task-bar">
          <div id="life-frame">
          <div id="life-bar"></div>
          <div id="life-mark"></div>
      </div>
    </div>

    <div class="task">
      <% @tasks.each do |task| %>
      <div class="task-mass-<%= task.id %>" style="display:flex; margin-bottom: 15px;">
        <%= audio_tag("btn.mp3",id:"audio") %>
          <div class="decrease-btn">▼</div>
          <div id="task-title">
            <%= link_to task.task_name, task_path(task.id), method: :delete, remote: true %>
          </div>
          <div class="increase-btn">▲</div>
      </div>
      <script>
        document.querySelector('.decrease-btn').onclick = function () {
        document.querySelector("#audio").play();}
        document.querySelector('.increase-btn').onclick = function () {
        document.querySelector("#audio").play();
        }
      </script>
      <% end %>

      <div class="add-task"></div>
      

    </div>

    <div class="add-btn">
      <button class="open-form-button">Add</button>
      <div class="modal-overlay">
          <form class="modal-form" action="/tasks" data-remote="true" method="post" onsubmit="return false">
              <p>
              タスク <input type="text" name="task_name">
              </p>
              <button type="button" class="submit-button">登録</button>
              <button type="button" class="close-button">閉じる</button>
          </form>
      </div> 
    </div>
    <%= audio_tag 'btn.mp3' %>

      
      <script>

          const lifeBar = document.getElementById('life-bar')
          const lifeMark = document.getElementById('life-mark')
          const increaseBtn = document.getElementsByClassName('increase-btn')
          for(i=0;i<increaseBtn.length;i++){
            increaseBtn[i].onclick = function () {
            alterLife( 10 )
            count_value += 1;
            count_disp.innerHTML = Math.floor((count_value)/10);
           } 
          }
          const decreaseBtn = document.getElementsByClassName('decrease-btn')
          for(i=0;i<decreaseBtn.length;i++){
            decreaseBtn[i].onclick = function () {
              alterLife( -10 )
            count_value -= 1;
            count_disp.innerHTML = Math.floor((count_value)/10);
           } 
          }

          var data = localStorage.getItem("boxStyles");
          var parsedData = JSON.parse(data) || {width: 0};
          var width = parseFloat(parsedData.width);
          const defaultValue = 0
          const lifeValue = width || defaultValue
          let life = lifeValue         
          lifeBar.style.width = "0%"       
          var count_value = 0
          var count_disp = document.getElementById("coins"); 
          
      
          // *** ライフ変更処理 ***
          function alterLife( value ){
              // lifeの値を算出する
              life += value 
              if ( life <= 0 ){
                  // 算出の結果 0 以下になった場合
                  life = 0
                  // 0.3秒後に光部分を非表示にする
                  setTimeout(function(){
                      lifeMark.style.visibility = 'hidden'
                  }, 300)
              } else {
                  // 算出の結果 100 以上になった場合
                  if ( life >= 100 ) {
                      life = 0
                  }
              }
              // スタイル(幅)を更新する
              lifeBar.style.width = life + "%"
              
          }
          // オートセーブする要素を取得する
  const box = document.getElementById("life-bar");

// ページが読み込まれたときに、保存されたデータがあれば取得する
if (localStorage.getItem("boxStyles")) {
  const boxStyles = JSON.parse(localStorage.getItem("boxStyles"));
  Object.keys(boxStyles).forEach((property) => {
    box.style[property] = boxStyles[property];
  });
}

// スタイルが変更されたときに、変更されたプロパティを保存する
function saveStyle(event) {
  const propertyName = event.propertyName;
  const propertyValue = box.style[propertyName];

  const boxStyles = JSON.parse(localStorage.getItem("boxStyles")) || {};
  boxStyles[propertyName] = propertyValue;
  localStorage.setItem("boxStyles", JSON.stringify(boxStyles));
}


// スタイルの変化を監視する
box.addEventListener("transitionend", saveStyle);


      </script>

  </div>
</div>